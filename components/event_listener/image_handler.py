# Auto generated by LangBot Plugin SDK.
# Please refer to https://docs.langbot.app/en/plugin/dev/tutor.html for more details.
from __future__ import annotations

import logging
import aiohttp
from langbot_plugin.api.definition.components.common.event_listener import EventListener
from langbot_plugin.api.entities import events, context
from langbot_plugin.api.entities.builtin.platform import message as platform_message


class ImageHandlerEventListener(EventListener):

    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(__name__)
        
        @self.handler(events.PersonMessageReceived)
        async def person_message_handler(event_context: context.EventContext):
            print("[ImageHandler] 收到个人消息事件")
            await self.handle_message(event_context)
            
        @self.handler(events.GroupMessageReceived)
        async def group_message_handler(event_context: context.EventContext):
            print("[ImageHandler] 收到群组消息事件")
            await self.handle_message(event_context)

    async def handle_message(self, event_context: context.EventContext):
        """处理消息事件"""
        try:
            print("[ImageHandler] === 开始处理消息 ===")
            
            message_chain = event_context.event.message_chain
            message_text = str(message_chain)
            
            print(f"[ImageHandler] 消息文本: {message_text}")
            
            # 检查是否是绘图命令
            if self.is_image_generate_command(message_text):
                print("[ImageHandler] 检测到绘图命令")
                prompt = self.extract_generate_prompt(message_text)
                if prompt:
                    print(f"[ImageHandler] 提取到绘图描述: {prompt}")
                    response = await self.generate_image(prompt)
                    await event_context.reply(response)
                    # 阻止事件继续传播，避免触发默认AI回复
                    event_context.prevent_default()
                    print("[ImageHandler] 已阻止默认处理")
                else:
                    print("[ImageHandler] 未找到生成描述")
                    # 即使没有找到描述，也要阻止默认处理，避免AI回复
                    event_context.prevent_default()
            else:
                print("[ImageHandler] 非绘图命令，忽略")
            
            print("[ImageHandler] === 消息处理完成 ===")
            
        except Exception as e:
            print(f"[ImageHandler] 处理消息时出错: {e}")
            import traceback
            traceback.print_exc()

    def is_image_generate_command(self, message: str) -> bool:
        """检查消息是否为图片生成命令"""
        commands = ["画图", "生成图片", "draw", "image"]
        message_lower = message.lower().strip()
        return any(message_lower.startswith(cmd) for cmd in commands)

    def extract_generate_prompt(self, message: str) -> str:
        """从消息中提取图片生成描述"""
        commands = ["画图", "生成图片", "draw", "image"]
        message = message.strip()
        
        for cmd in commands:
            if message.lower().startswith(cmd.lower()):
                prompt = message[len(cmd):].strip()
                return prompt
        return ""

    async def generate_image(self, prompt: str) -> platform_message.MessageChain:
        """生成图片"""
        try:
            print(f"[ImageHandler] 开始生成图片: {prompt}")
            
            # 获取配置
            config = self.plugin.get_config()
            api_key = config.get("api_key")
            base_url = config.get("base_url", "http://127.0.0.1:8080/v1")
            model = config.get("model", "qh-draw-x1-pro")
            image_size = config.get("image_size", "1024x1024")
            
            if not api_key:
                print("[ImageHandler] API Key 未配置")
                return platform_message.MessageChain([
                    platform_message.Plain(text="API Key 未配置")
                ])
            
            # 调用API
            url = f"{base_url.rstrip('/')}/images/generations"
            headers = {
                "Authorization": f"Bearer {api_key}",
                "Content-Type": "application/json"
            }
            
            data = {
                "model": model,
                "prompt": prompt,
                "n": 1,
                "size": image_size,
                "response_format": "url"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        print(f"[ImageHandler] API调用成功")
                        
                        if "data" in result and len(result["data"]) > 0:
                            image_url = result["data"][0]["url"]
                            print(f"[ImageHandler] 获得图片URL: {image_url}")
                            
                            return platform_message.MessageChain([
                                platform_message.Plain(text=f"图片生成完成：{prompt}"),
                                platform_message.Image(url=image_url)
                            ])
                        else:
                            return platform_message.MessageChain([
                                platform_message.Plain(text="API返回数据格式错误")
                            ])
                    else:
                        error_text = await response.text()
                        print(f"[ImageHandler] API调用失败: {response.status} - {error_text}")
                        return platform_message.MessageChain([
                            platform_message.Plain(text=f"图片生成失败：{response.status}")
                        ])
                        
        except Exception as e:
            print(f"[ImageHandler] 生成图片时发生错误: {e}")
            import traceback
            traceback.print_exc()
            return platform_message.MessageChain([
                platform_message.Plain(text=f"生成图片时发生错误: {str(e)}")
            ])
